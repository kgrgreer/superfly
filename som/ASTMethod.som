ASTMethod = (
  | holder pattern localDefs block isPrimitive index |

  holder:      v = ( holder      := v )
  pattern        = ( ^pattern )
  index:       v = ( index       := v )
  index          = ( ^index )
  pattern:     v = ( pattern     := v )
  localDefs:   v = ( localDefs   := v )
  block:       v = ( block       := v )
  isPrimitive: v = ( isPrimitive := v )

  asString = (
    ^ self toC
  )

  toC = ( | s |
    s := '\n'.
    isPrimitive ifTrue: [ s := s + '/* TODO: native\n' ].
    s := s + '\nSObject ' + pattern + '(' + (holder name )+ ' *self) {\n'.
    localDefs ifNotNil: [
      localDefs do: [ :def |
        s := s + '  SObject *' + def + ';\n'
      ].
      s := s + '\n'
    ].
    isPrimitive ifFalse: [ s := s + '  ' + block ].
    s := s + '\n}\n'.
    isPrimitive ifTrue: [ s := s + '/*\n' ].
    ^s
  )

----
  | methods__ |

  methods = (
    methods__ ifNil: [ methods__ := Hashtable new ].
    ^ methods__
  )

  pattern: p block: b = ( | m index |
    m := ASTMethod new.
    m pattern: p.
    b = 'primitive' ifTrue: [
      m isPrimitive: true.
    ] ifFalse: [
      m isPrimitive: false.
      m localDefs: (b at: 1).
      m block: (b at: 2).
    ].
    index := self methods get: p.
    index ifNil: [
      index := methods__ size + 1.
      methods__ at: p put: index.
    ].
    m index: index.
    CGenerator instance addMethod: m.
    ^m
  )
)
