SOMInterpreterTest = (
  | interp |

  test: m with: str = ( | res |
    ('TESTING: ' + m + ' with ' + str) println.
    res := ((interp perform: m) parse: (Stream newWithStr: (str + '  '))).
    ('result: ' + res + ' value: \'' + (res value class) + '\'') println.
    '' println.
  )

  run = (
    interp := SOMAttributeGrammar  new.

"
    self test: # with: ''.
"
[
    self test: #Num with: '9'.
    self test: #Num with: 'a'.

    self test: #Alpha with: 'a'.
    self test: #Alpha with: '9'.

    self test: #AlphaNum with: '9'.
    self test: #AlphaNum with: 'a'.
].
    self test: #Identifier with: 'a'.
    self test: #Identifier with: 'abc'.
    self test: #Identifier with: 'abc123'.
[
    self test: #Number with: '1'.
    self test: #Number with: '123'.
    self test: #Number with: '-123'.
    self test: #Number with: '1.12'.
    self test: #Number with: '123.12'.
    self test: #Number with: '-123.12'.
    self test: #Number with: ' 3.1415926'.

    self test: #STString with: '\'\''.
    self test: #STString with: '\'abc\''.

    self test: #Comment with: '" comment "'.

    self test: #Whitespace with: ' \r\n\t  '.

    self test: #STStringChar with: 'a'.

    self test: #Separator with: '---'.
    self test: #Separator with: '----'.
    self test: #Separator with: '-----'.

    self test: #OperatorSequence with: ',-~&*/\\+><@%'.

    self test: #Keyword with: 'abc:'.
    self test: #Keyword with: ' abc:'.

    self test: #literalArray with: '#()'.
    self test: #literalArray with: '#(123)'.
    self test: #literalArray with: '#(1 2 3 4 5)'.

    self test: #primary with: '3.14'.
    self test: #evaluation with: '3.14'.
    self test: #expression with: '3.14'.
    self test: #result with: '3.14'.
    self test: #blockBody with: '^3.14'.
    self test: #blockContents with: '^3.14'.
    self test: #method with: 'pi=(^3)'.
    self test: #method with: 'pi=primitive'.
    self test: #method with: 'f = (^3)'.
    self test: #methodBlock with: '(^3.14)'. "doesn't work"
    self test: #methodBlock with: '(3.14)'.
    self test: #result with: '3.14'.
    self test: #methodBlock with: '()'. "doesn't work"
    self test: #method with: 'f = (^3.14)'.
    self test: #method with: 'f = (^5)'.
    self test: #method with: 'f = (^\"foo\")'.

    self test: #classdef with: 'User = ( | firstName lastName | )'.

    self test: #literalSymbol with: '#abc'.
    self test: #literalString with: '\'abc\''.
    self test: #literalNumber with: '123'.


    self test: #blockArguments with: ':abc'.
    self test: #blockArguments with: ':abc:def'.

    self test: #blockPattern with: ':abc|'.
    self test: #blockPattern with: ':abc:def|'.

    self test: #primary with: '1'.

    self test: #assignation with: '1'.

    self test: #expression with: '1'.

    self test: #result with: '1'.

    self test: #blockBody with: '^1.'.

    self test: #blockContents with: '|a|^1.'.

    self test: #nestedBlock with: '[]'.

    self test: #STPrimitive with: 'primitive'.
    self test: #STPrimitive with: '   primitive'.

    self test: #SKIP with: '   "comment"   '.
    self test: #literalArray with: '#(1 12 123)'.
    self test: #literalArray with: '#(1.2)'.
    self test: #literal with: '1.2'.
    self test: #literalArray with: '#(1 12 123 1.2 2.3)'.
    self test: #instanceFields with: '|x y z|'.
    self test: #classdef with: 'Math = ()'.
    self test: #classdef with: 'Math = (\"math library\")'.
    self test: #classdef with: 'Trig = Math (\"trig library\")'.
    self test: #classdef with: 'Trig = Math ( )'.
    self test: #classdef with: 'Trig = Math (|x y z|)'.
    self test: #classdef with: 'Trig = (|x y z|)'.
    self test: #classdef with: 'Math = (pi=(^3))'.
    ].

    self test: #classdef with: 'Person = (|fName lName age| hash = primitive age = (|x y z| ^age))'.
    self test: #classdef with: 'Person2 = (|fName lName age| hash = primitive age = (|x y z| ^age))'.
    self test: #classdef with: 'Person3 = (|fName lName age| hash = primitive age = (^age) age: v = ( age := v ) name = ( ^ fName + \' \' + lName ))'.

    CGenerator instance toC println.

    'Done.' println.
  )
)
