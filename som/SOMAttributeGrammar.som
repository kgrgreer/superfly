SOMAttributeGrammar = SOMParser (

  print: v = (
    v class = Vector ifTrue: [ v := v asArray ].
    v class = Array ifTrue: [
      ('len: ' + ( v length ) + '[') print.
        v do: [ :i | self print: i. ' ' print ].
      ']' print
    ] ifFalse: [
      v print
    ]
  )

  arrayToStr: a = (
    "TODO: do this more efficiently"
    a class = Vector ifTrue: [ a := a asArray ].
    ^ a inject: '' into: [ :str :elem | str + (elem asString) ]
  )


  " START OF SEMANTIC ACTIONS "

  classdef = (
    ^ super classdef action: [ :cd |
      | name |
      name := cd at: 1.
      'classdef: ' println.
      self print: cd.

      ASTClass new: name
    ]
  )

  instanceFields = (
    ^ super instanceFields action: [ :cd |
      cd isNil ifTrue: [ nil ] ifFalse: [
        'if' println.
        self print: cd.
        cd
      ]
    ]
  )

  Identifier = (
    ^ super Identifier toStr
  )

  Number = (
    ^ super Number action: [ :a | | n |
    self print: a. '' println.
      n := ((self arrayToStr: (a at: 2)) asInteger).
      (a at: 3) notNil ifTrue: [ | f |
        f := 0.0 + ((self arrayToStr: ((a at: 3) at: 2)) asInteger).
        ((a at: 3) at: 2) size timesRepeat: [ f := f // 10.0 ].
        n := f + n
      ].
      (a at: 1) = '-' ifTrue: [ n := 0 - n ].
      n
    ]
  )

  literalSymbol = (
    ^ super literalSymbol toStr action: [ :s | s asSymbol ]
  )

  literalArray = (
    ^ super literalArray action: [ :a | (self print: a). a at: 1 ]
  )

  STString = (
    ^ super STString action: [ :a | self arrayToStr: (a at: 2) ]
  )

----

)
